use deku::prelude::*;

use super::{BaseOutput, Command};

#[derive(Debug, PartialEq, DekuRead, DekuWrite)]
#[deku(endian = "big", magic = b"\x09\x32")]
pub struct ExecShellcode {
    #[deku(pad_bytes_before = "4")]
    pub op_mod: u16,
    pub args: [u32; 6],
    pub shellcode: [u8; 0xa0],
}

#[derive(Debug, PartialEq, DekuRead, DekuWrite)]
#[deku(endian = "big")]
pub struct ExecShellcodeOutput {
    pub base: BaseOutput,
    pub results: [u32; 6],
    pub shellcode: [u8; 0xa0],
}

impl Command for ExecShellcode {
    type Output = ExecShellcodeOutput;

    fn size(&self) -> usize {
        0xc0
    }

    fn outlen(&self) -> usize {
        0xc0
    }
}

#[derive(Debug, PartialEq, DekuRead, DekuWrite)]
#[deku(endian = "big", magic = b"\x09\x32")]
pub struct ExecShellcode64 {
    #[deku(pad_bytes_before = "4")]
    pub op_mod: u16,
    pub args: [u64; 3],
    pub shellcode: [u8; 0xa0]
}

#[derive(Debug, PartialEq, DekuRead, DekuWrite)]
#[deku(endian = "big")]
pub struct ExecShellcode64Output {
    pub base: BaseOutput,
    pub results: [u64; 3],
    pub shellcode: [u8; 0xa0],
}

impl Command for ExecShellcode64 {
    type Output = ExecShellcode64Output;

    fn size(&self) -> usize {
        0xc0
    }

    fn outlen(&self) -> usize {
        0xc0
    }
}



#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_exec_shellcode() {
        let cmd = ExecShellcode {
            op_mod: 0x0000,
            args: [1, 2, 3, 4, 5, 6],
            shellcode: [0x41; 0xa0],
        };

        let res = cmd.to_bytes().unwrap();

        #[rustfmt::skip]
        let output = [
            0x09, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02,
            0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04,
            0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06,
            0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
            0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
            0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
            0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
            0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
            0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
            0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
            0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
            0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
            0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
            0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
            0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
            0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
            0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
            0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
            0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
            0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
            0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
            0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
            0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
        ];

        assert_eq!(res.len(), cmd.size());
        assert_eq!(res, output);
    }
}
